package main

import (
	"fmt"
	"sort"
)

/*Реализовать алгоритм бинарного поиска встроенными методами языка. Функция должна принимать отсортированный слайс и искомый элемент, возвращать индекс элемента или -1, если элемент не найден.

Подсказка: можно реализовать рекурсивно или итеративно, используя цикл for.*/

func main() {
	slice := []int{56, 32, 3, 12, 43, 7, 89, 1, 0}
	//отсортируем слайс
	sort.Ints(slice)
	fmt.Println(slice)
	var digit int
	fmt.Println("введите искомый элемент для поиска его индекса в слайсе")
	fmt.Scan(&digit)

	if answer, ok := bSearch(slice, digit); ok {
		fmt.Printf("искомый элемент %d находится под индексом: %d\n", digit, answer)
		return
	}
	fmt.Println("искомого элемента нет в слайсе")
	fmt.Println("-1")

}

// можно и нужно для простоты и читаемости кода убрать bool из возвращаемых значений, но я посчитал, что так будет информативнее для вывода результата поиска;)
func bSearch(arr []int, n int) (int, bool) {
	//определяем индексы крайних границ
	left, right := 0, len(arr)-1

	for left <= right {
		// определяем середину
		mid := left + (right-left)/2
		switch {
		case arr[mid] == n:
			return mid, true
		case arr[mid] > n: //если значение по центральному индексу больше искомого, то предвигаем правую границу влево
			right = mid - 1
		default: // если значение по центральному индексу меньше искомого, то передвигаем левую границу вправо
			left = mid + 1
		}
	}
	return -1, false
}
